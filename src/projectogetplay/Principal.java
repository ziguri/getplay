/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectogetplay;

import jaco.mp3.a.f;
import jaco.mp3.player.MP3Player;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;

/**
 *
 * @author Aires
 */
public class Principal extends javax.swing.JFrame {

    protected GetPlay app;
    protected User logged;
    private PnColuna pnColuna;
    private PnListaMusicas pnListaMusicas;
    private PnListaPLOutros pnListaPLOutros;
    private PnMyPlayList pnMyPlaylist;
    private PnPesquisa pnPesquisa;
    private PnTabelaMusica pnTabelaMusica;
    private PnTabelaPlayList pnTabelaPlayList;
    protected JdEditMusic jdEditMusic;
    private final MP3Player player;
    private int rowIndex;
    private ArrayList<Music> dadosTabela;
    private File[] f;

    boolean playing = false;
    String current_song = "";

    public Principal() {
        initComponents();

        //inicializa os paineis
        //this.pnListaMusicas=new PnListaMusicas(this);
        //this.pnListaPLOutros= new PnListaPLOutros(this);
        //this.pnMyPlaylist= new PnMyPlayList(this);
        //this.pnPesquisa= new PnPesquisa(this);
        //this.pnTabelaMusica = new PnTabelaMusica(this);
        //this.pnTabelaPlayList = new PnTabelaPlayList(this);
        //this.jdEditMusic = new JdEditMusic(this, true);
        //this.pnColuna = new PnColuna(this);
        //this.pnLeitor = new PnLeitor(this);
        this.app = new GetPlay();
        this.logged = null;
        app.openFOUsers();
        app.listMusics();
        app.listUsers();
        player = new MP3Player();

        jBBackward.setEnabled(false);
        jBForward.setEnabled(false);
        jBStop.setEnabled(false);
        togglePlay.setEnabled(false);
        playPanel.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        pnBaseFundo = new javax.swing.JPanel();
        playPanel = new javax.swing.JPanel();
        jBStop = new javax.swing.JButton();
        jBBackward = new javax.swing.JButton();
        togglePlay = new javax.swing.JToggleButton();
        jBForward = new javax.swing.JButton();
        jLTitleMusica = new javax.swing.JLabel();
        pnBaseColuna = new javax.swing.JPanel();
        pnBaseLogin = new javax.swing.JPanel();
        emailField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        botaoLogin = new javax.swing.JButton();
        botaoRegistar = new javax.swing.JButton();
        lbFixoEmail = new javax.swing.JLabel();
        lbFixoPassword = new javax.swing.JLabel();
        pnBaseInfo = new javax.swing.JPanel();
        pnBaseTabela = new javax.swing.JPanel();
        imagemInicial = new javax.swing.JLabel();
        pnLogo = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Getplay");
        setMinimumSize(new java.awt.Dimension(1080, 701));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pnBaseFundo.setInheritsPopupMenu(true);
        pnBaseFundo.setMinimumSize(new java.awt.Dimension(1080, 90));
        pnBaseFundo.setPreferredSize(new java.awt.Dimension(1080, 90));

        jBStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Stop-32.png"))); // NOI18N
        jBStop.setBorder(null);
        buttonGroup.add(jBStop);
        jBStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopActionPerformed(evt);
            }
        });

        jBBackward.setBackground(new java.awt.Color(51, 51, 255));
        jBBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Backward-32_green.png"))); // NOI18N
        jBBackward.setBorder(null);
        jBBackward.setBorderPainted(false);
        buttonGroup.add(jBBackward);
        jBBackward.setContentAreaFilled(false);
        jBBackward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBackwardActionPerformed(evt);
            }
        });

        togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Play-32__green.png"))); // NOI18N
        togglePlay.setBorder(null);
        togglePlay.setContentAreaFilled(false);
        togglePlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglePlayActionPerformed(evt);
            }
        });

        jBForward.setBackground(new java.awt.Color(51, 51, 255));
        jBForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Forward-32.png"))); // NOI18N
        jBForward.setBorder(null);
        jBForward.setBorderPainted(false);
        buttonGroup.add(jBForward);
        jBForward.setContentAreaFilled(false);
        jBForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBForwardActionPerformed(evt);
            }
        });

        jLTitleMusica.setText("<Title Musica>");

        javax.swing.GroupLayout playPanelLayout = new javax.swing.GroupLayout(playPanel);
        playPanel.setLayout(playPanelLayout);
        playPanelLayout.setHorizontalGroup(
            playPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jBStop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLTitleMusica))
                    .addGroup(playPanelLayout.createSequentialGroup()
                        .addComponent(jBBackward)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(togglePlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBForward)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        playPanelLayout.setVerticalGroup(
            playPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(playPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBStop)
                    .addComponent(jBBackward)
                    .addComponent(jBForward)
                    .addComponent(togglePlay, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLTitleMusica)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnBaseFundoLayout = new javax.swing.GroupLayout(pnBaseFundo);
        pnBaseFundo.setLayout(pnBaseFundoLayout);
        pnBaseFundoLayout.setHorizontalGroup(
            pnBaseFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnBaseFundoLayout.createSequentialGroup()
                .addComponent(playPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 814, Short.MAX_VALUE))
        );
        pnBaseFundoLayout.setVerticalGroup(
            pnBaseFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(playPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(pnBaseFundo, gridBagConstraints);

        pnBaseColuna.setBackground(new java.awt.Color(102, 255, 102));
        pnBaseColuna.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pnBaseColuna.setMinimumSize(new java.awt.Dimension(250, 420));
        pnBaseColuna.setOpaque(false);
        pnBaseColuna.setPreferredSize(new java.awt.Dimension(250, 420));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(pnBaseColuna, gridBagConstraints);

        pnBaseLogin.setMinimumSize(new java.awt.Dimension(830, 70));
        pnBaseLogin.setPreferredSize(new java.awt.Dimension(830, 70));
        pnBaseLogin.setLayout(new java.awt.GridBagLayout());

        emailField.setToolTipText("");
        emailField.setPreferredSize(new java.awt.Dimension(111, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 434, 12, 0);
        pnBaseLogin.add(emailField, gridBagConstraints);

        passwordField.setToolTipText("");
        passwordField.setPreferredSize(new java.awt.Dimension(111, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 105;
        gridBagConstraints.ipady = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 18, 12, 0);
        pnBaseLogin.add(passwordField, gridBagConstraints);

        botaoLogin.setText("Log in");
        botaoLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLoginActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 0);
        pnBaseLogin.add(botaoLogin, gridBagConstraints);

        botaoRegistar.setText("Register");
        botaoRegistar.setToolTipText("");
        botaoRegistar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRegistarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 10);
        pnBaseLogin.add(botaoRegistar, gridBagConstraints);

        lbFixoEmail.setText("E-mail");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 436, 0, 0);
        pnBaseLogin.add(lbFixoEmail, gridBagConstraints);

        lbFixoPassword.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 18, 0, 0);
        pnBaseLogin.add(lbFixoPassword, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        getContentPane().add(pnBaseLogin, gridBagConstraints);

        pnBaseInfo.setBackground(new java.awt.Color(102, 102, 255));
        pnBaseInfo.setMinimumSize(new java.awt.Dimension(830, 100));
        pnBaseInfo.setOpaque(false);
        pnBaseInfo.setPreferredSize(new java.awt.Dimension(830, 100));
        pnBaseInfo.setLayout(new javax.swing.BoxLayout(pnBaseInfo, javax.swing.BoxLayout.LINE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(pnBaseInfo, gridBagConstraints);

        pnBaseTabela.setMinimumSize(new java.awt.Dimension(830, 420));
        pnBaseTabela.setPreferredSize(new java.awt.Dimension(830, 420));

        imagemInicial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/painel_logout.png"))); // NOI18N
        imagemInicial.setToolTipText("");
        pnBaseTabela.add(imagemInicial);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(pnBaseTabela, gridBagConstraints);

        pnLogo.setMinimumSize(new java.awt.Dimension(250, 170));
        pnLogo.setPreferredSize(new java.awt.Dimension(250, 170));
        pnLogo.setLayout(new javax.swing.BoxLayout(pnLogo, javax.swing.BoxLayout.LINE_AXIS));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logo.png"))); // NOI18N
        logo.setToolTipText("");
        pnLogo.add(logo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        getContentPane().add(pnLogo, gridBagConstraints);

        menu.setMaximumSize(new java.awt.Dimension(56, 100));

        jMenu1.setText("File");
        menu.add(jMenu1);

        jMenu2.setText("Edit");
        menu.add(jMenu2);

        setJMenuBar(menu);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void logOut() {

        setLogged(null);

        pnBaseLogin.remove(pnPesquisa);
        pnBaseColuna.removeAll();
        pnBaseTabela.removeAll();
        pnBaseInfo.removeAll();
        jBBackward.setEnabled(false);
        jBForward.setEnabled(false);
        jBStop.setEnabled(false);
        togglePlay.setEnabled(false);
        playPanel.setVisible(false);
        imagemInicial.setVisible(true);
        pnBaseTabela.add(imagemInicial);

        app.guardaFoMusics();

        revalidate();
        repaint();

        lbFixoEmail.setVisible(true);
        lbFixoPassword.setVisible(true);
        botaoLogin.setVisible(true);
        botaoRegistar.setVisible(true);
        emailField.setVisible(true);
        passwordField.setVisible(true);

    }

    private void update() {

    }
    private void botaoLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLoginActionPerformed

        if (emailField.getText().isEmpty() || passwordField.getPassword() == null) {

            JOptionPane.showMessageDialog(this, "All fields are mandatory", "Error!", JOptionPane.ERROR_MESSAGE);
        } else if (!(app.existUser(emailField.getText()))) {

            JOptionPane.showMessageDialog(this, "User not found", "Error!", JOptionPane.ERROR_MESSAGE);
        } else if (!(app.passwordCorrect(emailField.getText(), String.valueOf(passwordField.getPassword())))) {

            JOptionPane.showMessageDialog(this, "Password is incorrect.", "Error!", JOptionPane.ERROR_MESSAGE);
        } else {

            logged = app.getUserWithEmail(emailField.getText());

            if (logged != null) {

                emailField.setText("");
                passwordField.setText("");

                //desaparece o painel de login
                lbFixoEmail.setVisible(false);
                lbFixoPassword.setVisible(false);
                botaoLogin.setVisible(false);
                botaoRegistar.setVisible(false);
                emailField.setVisible(false);
                passwordField.setVisible(false);

                app.openFOMusic();
                //ativar paineis
                playPanel.setVisible(true);
                imagemInicial.setVisible(false);
                //pnBaseInfo.removeAll();
                pnListaMusicas = new PnListaMusicas(this);
                pnListaMusicas.getjLabPListName1().setText("Number of musics: " + app.getMusicsList().size());
                pnBaseInfo.add(pnListaMusicas);

                pnColuna = new PnColuna(this);
                pnBaseColuna.add(pnColuna);
                pnPesquisa = new PnPesquisa(this);
                pnBaseLogin.add(pnPesquisa);

                //carregar a lista de musica
                //app.musicsList.clear();
                //painel tabela               
                pnTabelaMusica = new PnTabelaMusica(this, app.getMusicsList());
                pnBaseTabela.add(pnTabelaMusica);

                jBBackward.setEnabled(true);
                jBForward.setEnabled(true);
                jBStop.setEnabled(true);
                togglePlay.setEnabled(true);

                revalidate();
                repaint();
            }

        }
    }//GEN-LAST:event_botaoLoginActionPerformed

    private void botaoRegistarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRegistarActionPerformed
        new JdlRegisto(this, true).setVisible(true);

    }//GEN-LAST:event_botaoRegistarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        app.guardaFoMusics();
        app.guardaFoUsers();
    }//GEN-LAST:event_formWindowClosing

    private void jBStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopActionPerformed
        player.stop();
        togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Play-32__green.png")));
        togglePlay.setBorder(null);
        togglePlay.setContentAreaFilled(false);
    }//GEN-LAST:event_jBStopActionPerformed

    public void paraMusica() {
        player.stop();
        togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Play-32__green.png")));
        togglePlay.setBorder(null);
        togglePlay.setContentAreaFilled(false);
    }

    public void iniciaMusica() {
//        //final JTable tabela = pnTabelaMusica.getTblMusic();
//        //mlistTbl.clear();
//        dadosTabela = pnTabelaMusica.getArray();
//        rowIndex = pnTabelaMusica.linhaSelecionada();
//        System.out.println(rowIndex);
//        //File[] f = getApp().stringToMp3(mlistTbl,rowIndex );
//
//        File[] f = getApp().stringToMp3(dadosTabela);
//        //rowIndex = tabela.getSelectedRow();
//
//        for (int i = 0; i < dadosTabela.length; i++) {
//            player.addToPlayList(f[i]);
//        }//adiciona as musicas da playlist da tabela ao MP3player
//        if (togglePlay.isSelected()) {
//            togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Pause-32.png")));
//            togglePlay.setBorder(null);
//            togglePlay.setContentAreaFilled(true);
//            player.play();
//        } else {
//            togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Play-32__green.png")));
//            togglePlay.setBorder(null);
//            togglePlay.setContentAreaFilled(false);
//            player.pause();
//        }

    }

    /**
     * Show the refreshed playlist table and header each time the list is
     * modifyed.
     */
    public void actualizaTabelaMyPlaylist() {

        //Limpa o cabeçalho e a tabela
        pnBaseTabela.removeAll();
        pnBaseInfo.removeAll();

        //Adiciona a nova tabela de Playlist´s
        this.pnTabelaPlayList = new PnTabelaPlayList(this, pnColuna.getPlaylistProp());
        pnBaseTabela.add(pnTabelaPlayList);

        PnMyPlayList panel = new PnMyPlayList(this);
        panel.getjLabPListDir1().setText("Number of Playlists: " + pnColuna.getPlaylistProp().size());
        pnBaseInfo.add(new PnMyPlayList(this));

        revalidate();
        repaint();
    }

public void actualizaTabelaOtherPlaylist() {

      //Limpa o cabeçalho e a tabela
      pnBaseTabela.removeAll();
      pnBaseInfo.removeAll();//fica

      //Adiciona a nova tabela de Playlist´s
      this.pnTabelaPlayList = new PnTabelaPlayList(this, pnColuna.getPlaylistPub());
      pnBaseTabela.add(pnTabelaPlayList);

      PnListaPLOutros panel = new PnListaPLOutros(this);
     // panel.jLabPListName1().setText("Number of Playlists: " + pnColuna.getPlaylistPub().size());
      pnBaseInfo.add(new PnListaPLOutros(this));

      revalidate();
      repaint();
  }

    private void jBForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBForwardActionPerformed
        player.skipForward();

    }//GEN-LAST:event_jBForwardActionPerformed

    private void togglePlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglePlayActionPerformed
//        dadosTabela = pnTabelaMusica.getArray();
//        if (!dadosTabela.isEmpty()) {
//            int tamanho = dadosTabela.size();
//            for (int i = tamanho - 1; i >= 0; i--) {
//                dadosTabela.remove(i);
//            }
//        }
        pnBaseTabela.removeAll();
        pnBaseTabela.add(pnTabelaMusica);
        revalidate();
        repaint();

        dadosTabela = pnTabelaMusica.getDadosArray();
        rowIndex = pnTabelaMusica.getTblMusic().getSelectedRow();

        System.out.println("Indice da tabela " + rowIndex);

        f = getApp().stringToMp3(dadosTabela);

        for (int i = 0; i < dadosTabela.size(); i++) {
            player.addToPlayList(f[i]);

        }//adiciona as musicas da playlist da tabela ao MP3player

        if (togglePlay.isSelected()) {
            togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Pause-32.png")));
            togglePlay.setBorder(null);
            togglePlay.setContentAreaFilled(true);
            
            String current_song = (String) f[rowIndex].getAbsolutePath();
            
            new MP3Player(new File(current_song)).play();

        } else {
            togglePlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Play-32__green.png")));
            togglePlay.setBorder(null);
            togglePlay.setContentAreaFilled(false);
            player.pause();
            player.removeAll();

        //dadosTabela = pnTabelaMusica.getDadosArray();
            //rowIndex = pnTabelaMusica.getTblMusic().getSelectedRow();
        }

    }//GEN-LAST:event_togglePlayActionPerformed

    class PlayerThread extends Thread {

        public void run() {
            try {
                MP3Player mp3_player = new MP3Player(new File(current_song));
                mp3_player.play();
            } catch (Exception e) {
                System.err.println(e);
            }
        }
    }
//    

    public int getRowIndex() {
        return rowIndex;
    }

    public void setRowIndex(int rowIndex) {
        this.rowIndex = rowIndex;
    }

    public JToggleButton getTogglePlay() {
        return togglePlay;
    }

    public void setTogglePlay(JToggleButton togglePlay) {
        this.togglePlay = togglePlay;
    }

    private void jBBackwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBackwardActionPerformed
        player.skipBackward();
    }//GEN-LAST:event_jBBackwardActionPerformed

    public void setPnTabelaPlayList(PnTabelaPlayList pnTabelaPlayList) {
        this.pnTabelaPlayList = pnTabelaPlayList;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Principal novo = new Principal();
                novo.setVisible(true);
                Action logout = new AbstractAction() {
                    public void actionPerformed(ActionEvent e) {
                        //JFrame frame = (JFrame) e.getSource();
                        Principal executavel = (Principal) e.getSource();
                        //frame.dispose();
                        executavel.logOut();
                    }
                };

                InactivityListener listener = new InactivityListener(novo, logout, 1);
                listener.start();
                // new Principal().setVisible(true);
            }
        });
    }

    public GetPlay getApp() {
        return app;
    }

    public User getLogged() {
        return logged;
    }

    public void setLogged(User logged) {
        this.logged = logged;
    }

    public JButton getBotaoLogin() {
        return botaoLogin;
    }

    public JButton getBotaoRegistar() {
        return botaoRegistar;
    }

    public JTextField getEmailField() {
        return emailField;
    }

    public JLabel getLbFixoEmail() {
        return lbFixoEmail;
    }

    public JLabel getLbFixoPassword() {
        return lbFixoPassword;
    }

    public JPasswordField getPasswordField() {
        return passwordField;
    }

    public JPanel getPnBaseColuna() {
        return pnBaseColuna;
    }

    public JPanel getPnBaseInfo() {
        return pnBaseInfo;
    }

    public JPanel getPnBaseLogin() {
        return pnBaseLogin;
    }

    public JPanel getPnBaseTabela() {
        return pnBaseTabela;
    }

    public void setPnPesquisa(PnPesquisa pnPesquisa) {
        this.pnPesquisa = pnPesquisa;
    }

    public void setPnBaseTabela(JPanel pnBaseTabela) {
        this.pnBaseTabela = pnBaseTabela;
    }

    public void setPnTabelaMusica(PnTabelaMusica pnTabelaMusica) {
        this.pnTabelaMusica = pnTabelaMusica;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoLogin;
    private javax.swing.JButton botaoRegistar;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel imagemInicial;
    private javax.swing.JButton jBBackward;
    private javax.swing.JButton jBForward;
    private javax.swing.JButton jBStop;
    private javax.swing.JLabel jLTitleMusica;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JLabel lbFixoEmail;
    private javax.swing.JLabel lbFixoPassword;
    private javax.swing.JLabel logo;
    private javax.swing.JMenuBar menu;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPanel playPanel;
    private javax.swing.JPanel pnBaseColuna;
    private javax.swing.JPanel pnBaseFundo;
    private javax.swing.JPanel pnBaseInfo;
    private javax.swing.JPanel pnBaseLogin;
    private javax.swing.JPanel pnBaseTabela;
    private javax.swing.JPanel pnLogo;
    private javax.swing.JToggleButton togglePlay;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pnColuna
     */
    public PnColuna getPnColuna() {
        return pnColuna;
    }

    /**
     * @return the pnListaMusicas
     */
    public PnListaMusicas getPnListaMusicas() {
        return pnListaMusicas;
    }

    /**
     * @return the pnListaPLOutros
     */
    public PnListaPLOutros getPnListaPLOutros() {
        return pnListaPLOutros;
    }

    /**
     * @return the pnMyPlaylist
     */
    public PnMyPlayList getPnMyPlaylist() {
        return pnMyPlaylist;
    }

    /**
     * @return the pnPesquisa
     */
    public PnPesquisa getPnPesquisa() {
        return pnPesquisa;
    }

    /**
     * @return the pnTabelaMusica
     */
    public PnTabelaMusica getPnTabelaMusica() {
        return pnTabelaMusica;
    }

    /**
     * @return the pnTabelaPlayList
     */
    public PnTabelaPlayList getPnTabelaPlayList() {
        return pnTabelaPlayList;
    }

    public void setPnColuna(PnColuna pnColuna) {
        this.pnColuna = pnColuna;
    }

}
